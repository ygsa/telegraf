#!/bin/bash
# set the global tags and influx server
# 2022-08-24 <chenzhe07@gmail.com>

set -e -o pipefail
[ "$DEBUG" ] && set -x

# log funtion
ts() {
  TS=$(date +%F-%T | tr ':-' '_')
  echo "$TS - $*"
}

log() {
  ts "[info] $*"
}

warn() {
  ts "[warn] $*" >&2
}

error() {
  ts "[error] $*" >&2
  exit 1
}

die() {
  ts "[fatal] $*" >&2
  exit 2
}

_which() {
  if [ -x /usr/bin/which ]; then
    /usr/bin/which "$1" 2>/dev/null | awk '{print $1}'
  elif which which 1>/dev/null 2>&1; then
    which "$1" 2>/dev/null | awk '{print $1}'
  else
    echo "$1"
  fi
}

# Run the program
main() {
  for o; do
    case "${o}" in
      -u)       shift; OPT_ID="$1";      shift;  ;;
      -i)       shift; OPT_IP="$1";      shift;  ;; 
      -d)       shift; OPT_DC="$1";      shift;  ;;
      -m)       shift; OPT_MARK="$1";    shift;  ;;
      -t)       shift; OPT_TEAM="$1";    shift;  ;;
      -n)       shift; OPT_NET="$1";     shift;  ;;
      -1)       shift; OPT_SERVER1="$1"; shift;  ;;
      -2)       shift; OPT_SERVER2="$1"; shift;  ;;
      -k)       shift; OPT_TOKEN="$1";   shift;  ;;
      -s)       shift; OPT_SCHEME="$1";  shift;  ;;
      -c)       shift; OPT_CONFIG="$1";  shift;  ;;
      -v)       grep -A2 '^=head1 VERSION' "$0" | tail -n1; exit 0 ;;
      -h)       perl -00 -ne 'm/^\s+Usage:/ && print' "$0"; exit 0 ;;
      -*)       echo "Unknown option ${o}. Try -h."; exit 1; ;;
    esac
  done

  OPT_ID="${OPT_ID:-"NULL"}"
  OPT_IP="${OPT_IP:-"NULL"}"
  OPT_DC="${OPT_DC:-"NULL"}"
  OPT_MARK="${OPT_MARK:-"NULL"}"
  OPT_TEAM="${OPT_TEAM:-"NULL"}"
  OPT_NET="${OPT_NET:-"NULL"}"
  OPT_TOKEN="${OPT_TOKEN:-"NULL"}"
  OPT_SERVER1="${OPT_SERVER1:-"NULL"}"
  OPT_SERVER2="${OPT_SERVER2:-"NULL"}"
  OPT_SCHEME="${OPT_SCHEME:-"https"}"
  OPT_CONFIG="${OPT_CONFIG:-"/etc/telegraf/telegraf.conf"}"

  [[ -e "$OPT_CONFIG" ]] || error "no such file $OPT_CONFIG!"

  if [[ ($OPT_ID == "NULL" && $OPT_IP == "NULL" && $OPT_MARK == "NULL") && \
        ($OPT_DC == "NULL" && $OPT_MARK == "NULL" && $OPT_TEAM == "NULL") ]]; then
    error "both of the -u, -i, -m or -d, -m, -t are NULL, skip..."
  fi

  if [[ $OPT_SERVER1 == "NULL" \
        && $OPT_SERVER2 == "NULL" ]]; then
    error "must set servers"
  fi

  if ! $(is_ip_valid $OPT_SERVER1) && ! $(is_ip_valid $OPT_SERVER2); then
    error "must set valid ip address"
  fi

  if [[ $OPT_SCHEME != "http" \
        && $OPT_SCHEME != "https" ]]; then
    error "schema must be http or https"
  fi

  # server1 and server2 must in the same network class(internal or public)
  if $(is_ip_private $OPT_SERVER1) || $(is_ip_private $OPT_SERVER2); then
    OPT_SCHEME="http"
  fi

  if grep 'outputs.graphite' $OPT_CONFIG >/dev/null 2>&1; then
    change_conf_file $OPT_CONFIG
  fi

  if [ -e "/etc/telegraf/telegraf.d/socket_listener.conf" ]; then
    if grep 'graphite' "/etc/telegraf/telegraf.d/socket_listener.conf" >/dev/null 2>&1; then
      sed -i "s/graphite/influx/" "/etc/telegraf/telegraf.d/socket_listener.conf"
    fi
  fi

  OPT_SCHEME="https" # always https when use influx
  if grep '{{influxdbs}}' $OPT_CONFIG >/dev/null 2>&1; then

    SERVERS=$(get_influxdb_servers $OPT_ID $OPT_TEAM $OPT_MARK $OPT_TOKEN $OPT_SERVER1 $OPT_SERVER2 $OPT_SCHEME)
    if [ "$SERVERS" ]; then
      if grep '{{influxdbs}}' $OPT_CONFIG >/dev/null; then
        sed -i "s|{{influxdbs}}|$SERVERS|" $OPT_CONFIG
        [[ "$?" -eq 0 ]] && {
          log "change servers to $SERVERS ok"
        } || {
          error "change servers to $SERVERS error"
        }
      fi

      if [[ $OPT_SCHEME == "https" && -e "/etc/telegraf/tls" ]]; then
        if grep '#tls' $OPT_CONFIG >/dev/null; then
          sed -i "s/#tls/tls/g" $OPT_CONFIG
          sed -i "s/#insecure_skip_verify/insecure_skip_verify/" $OPT_CONFIG
	fi
      fi

      if telegraf --test --config $OPT_CONFIG >/dev/null 2>&1; then
         log "$OPT_CONFIG change ok"
         DEL_CONF="${OPT_CONFIG}~"
         [[ -e "$DEL_CONF" ]] && unlink $DEL_CONF
      else
         error "$OPT_CONFIG change error, read more from /var/log/telegraf/telegraf.log"
      fi
    else
      error "no server alive!"
    fi
  fi

  SERVER_STR=$(get_valid_servers $OPT_SERVER1 $OPT_SERVER2)

  if [[ "$OPT_ID" != "NULL" && "$OPT_IP" != "NULL" && "$OPT_MARK" != "NULL" ]]; then
    # delete team, mark, dc line
    if grep '$TEAM' $OPT_CONFIG >/dev/null; then
      sed -i "6,7d" $OPT_CONFIG
    fi
    
    # at least one server ok, then change the telegraf default
  cat <<EOF > /etc/default/telegraf
ID="$OPT_ID"
IP="$OPT_IP"
MARK="$OPT_MARK"
EOF

  if [[ $OPT_TOKEN != "NULL" ]]; then

cat <<EOF >> /etc/default/telegraf
SCHEME="$OPT_SCHEME"
TOKEN="$OPT_TOKEN"
SERVER="$SERVER_STR"
EOF
  fi

  else
    # delete id line
    if grep '$ID' $OPT_CONFIG >/dev/null; then
      sed -i "4d" $OPT_CONFIG
    fi

    IP=$(get_one_ip $OPT_NET)
    IP="${IP:-"NULL"}"

    # at least one server ok, then change the telegraf default
    cat <<EOF > /etc/default/telegraf
DC="$OPT_DC"
MARK="$OPT_MARK"
TEAM="$OPT_TEAM"
IP="$IP"
TOKEN="$OPT_TOKEN"
SERVER="$SERVER_STR"
SCHEME="$OPT_SCHEME"
EOF
  fi

  if [[ "$?" -eq 0 ]]; then
    log "change global tags ok"
  else
    error "change global tags error"
  fi

  cat <<BANNER
----------------------------------------------------------------------
Thanks for using telegraf!

  /etc/telegraf/telegraf.conf
  /etc/telegraf/telegraf.d
  systemctl start telegraf

----------------------------------------------------------------------
BANNER

}

change_conf_file() {
  local conf="$1"
  local temp_conf="/tmp/telegraf_temp.conf"

  perl -ne '
     BEGIN {
       my $flag = 0;
       my $out  = "";
     }

     next if /#\s*Read metrics about cpu/;

     if ($_ =~ m/(?:#\s*Configuration for Graphite server|outputs\.graphite)/i) {
       $flag = 1;
     }

     $out .= "$_" if $flag == 0;
     if ($_ =~ m/inputs\.cpu/i) {
       $out .=<<"EOF";
# Configuration for sending metrics to InfluxDB
[[outputs.influxdb]]
  urls = [{{influxdbs}}]
  database = "hostmonitor"
  database_tag = ""
  skip_database_creation = true
  timeout = "5s"

  ## Optional TLS Config
  #tls_ca = "/etc/telegraf/tls/ca.pem"
  #tls_cert = "/etc/telegraf/tls/client-cert.pem"
  #tls_key = "/etc/telegraf/tls/client-key.pem"
  #insecure_skip_verify = true

  # compress body
  content_encoding = "gzip"

EOF

       $out .= $_;
       $flag = 0 if $flag == 1;
     }

   END {
     print "$out";
   }    
  ' $conf > $temp_conf

  if [[ -e "$temp_conf" ]]; then
    cp -f -b $temp_conf $conf && unlink $temp_conf
  fi
}

get_valid_servers() {
  local server1="$1"
  local server2="$2"

  echo -e "$server1 $server2" | \
    perl -ne '
      chomp;
      my $line = $_;
      my @m = grep(!/NULL/i, split(/\s+/, $line, 2));
      print join(", ", @m);
    '
}

is_ip_valid() {
  local ip="$1"
  echo -e "$ip" | \
    perl -ne '
      chomp;
      my $ip = $_;

      $ip =~ s/:\d+$//g;
      my $ip_re = qr/[0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]/;
      if ($ip =~ /^$ip_re\.$ip_re\.$ip_re\.$ip_re$/) {
          exit 0;
      }
      exit 1;
    '
}

is_ip_private() {
  local ip="$1"
  echo -e "$ip" | \
    perl -ne '
      BEGIN {
        sub ip_int {
          my $ip = shift;
          return 0 unless defined $ip;
          my $ipint = 0;
          my $i = 3;
          foreach ( $ip =~ /\d+/g) {
            $ipint += ($_ << (8*$i--));
          }
         
          return $ipint;
        }
    
        # internal ip range
        sub is_in_private {
	  my $ip = shift;
	  return 0 if length($ip) < 7;
	  $ip =~ s/:\d+$//g;
          my $ipint = ip_int($ip);
         
          if (($ipint >= 167772160 && $ipint <= 184549375)
             || ($ipint >= 2886729728 && $ipint <= 2887778303)
             || ($ipint >= 3232235520 && $ipint <= 3232301055)) {
            return 1;
          }
          else {
            return 0;
          }
        }
      };

      chomp;
      my $ip = $_;
      if (is_in_private($ip)) {
        exit 0;
      }

      exit 1;
    '
}

get_influxdb_servers() {
  local id="$1"
  local team="$2"
  local mark="$3"
  local token="$4"
  local server1="$5"
  local server2="$6"
  local scheme="$7"
  local key="telegraf/${team}/${mark}/influxdb_server"

  local dbnumber=0
  if [[ $id != "NULL" ]]; then
    dbnumber=12  # diff db number
    key="telegraf/comm/influxdb_server"
  fi

  local value=""
  if [[  $token != "NULL" ]]; then
    for server in $server1 $server2; do
      if [[ $scheme == "http" ]]; then
        value=$(consul-kv -server $server -token $token -key $key)
      else
        key="telegraf/${team}/${mark}/influxdb_server_https"
        if [[ $id != "NULL" ]]; then
          key="telegraf/comm/influxdb_server_https"
        fi
        value=$(consul-kv -tls -server $server -token $token -key $key)
      fi
    
      if [ "$?" -ne 0 ]; then
        value="$server1, $server2"  # the same as servers if can not get value
      else
        if [[ $value == "" ]]; then
          value="$server1, $server2"  # the same as servers if can not get value
	fi
        break
      fi
    done
  else
    value="$server1, $server2"
  fi

  verify_servers "$value" $scheme $dbnumber
}

verify_servers() {
  local servers="$1"
  local scheme="$2"
  local dbnumber="$3"

  export TELE_SCHEME="$scheme"
  export TELE_DBNUMBER="$dbnumber"
  echo -e "$servers" | \
    perl -ne '
      BEGIN {
        use strict;
        use warnings;
        use IO::Socket::INET;
	my @servers;
      };
      
      chomp;

      my $scheme   = $ENV{TELE_SCHEME};
      my $dbnumber = $ENV{TELE_DBNUMBER};

      if (! defined($scheme) || ! defined($dbnumber)) {
        die "undefined scheme or dbnumber!\n";
      }

      my @lists = split(/,\s*/, $_);
      foreach my $s (@lists) {
        $s =~ s/\x{22}|\x{27}//g;
        my ($host, $port) = split(/(?::|\s+)/, $s);
        $port ||= 8480;

        my $fail = 0;
        my $socket = IO::Socket::INET->new(
          PeerAddr => $host,
          PeerPort => $port,
          Proto    => "tcp",
          Timeout  => 3,
        ) || $fail++;
        
        if ($fail > 0) {
          next;
        }
        unless (grep(/$host:$port/, @servers)) {
          push @servers, "\"$scheme://$host:$port/insert/$dbnumber/influx/\"";
        }
      }
    
      END {
        if (@servers + 0 > 0) {
          print join(", ", @servers);
        }
        else {
          print "";
        }
      }
    '
}

get_one_ip() {
  export local_net="$1"

  ifconfig -a | \
     perl -ne '
      BEGIN {
        sub ip_int {
          my $ip = shift;
          return 0 unless defined $ip;
          my $ipint = 0;
          my $i = 3;
          foreach ( $ip =~ /\d+/g) {
            $ipint += ($_ << (8*$i--));
          }
         
          return $ipint;
        }
    
        # internal ip range
        sub is_in_privite {
          my $ipint = shift;
         
          if (($ipint >= 167772160 && $ipint <= 184549375)
             || ($ipint >= 2886729728 && $ipint <= 2887778303)
             || ($ipint >= 3232235520 && $ipint <= 3232301055)) {
            return 1;
          }
          else {
            return 0;
          }
        }
    
        my @ips;
      };
    
      chomp;
      next unless grep(/inet\b/, $_);
      my $ip;
      if (m/\s*inet\s+(?:addr:|)(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s+/) {
        $ip = $1;
      }
      if (is_in_privite(ip_int($ip))) {
        push @ips, $ip;
      }
    
      END {
        my $net = $ENV{local_net} || undef;
        if (@ips + 0 > 0) {
          if (defined $net && $net ne "NULL") {
            my @ns = grep(/$net/, @ips);
            if (@ns + 0 > 0) {
              print $ns[0] . "\n";
            }
            else {
              print $ips[0] . "\n";
            }
          }
          else {
            print $ips[0] . "\n";
          }
        }
        else {
          print "\n";
        }
      }
  '
}

is_sourced() {
  [ "${0##*/}" = "telegraf-prepare" ] || [ "${0##/}" = "bash" -a "$_" = "$0" ]
}

if is_sourced; then
  OUTPUT=$(main "$@")
  echo "${OUTPUT}"
  exit 0
fi

# Documentation
: <<'DOCUMENTATION'
=pod

=head1 NAME

telegraf-prepare - set the global tags and influxdb servers for the telegraf setting.

=head1 SYNOPSIS

  Usage: telegraf-tags [OPTIONS]
  OPTION:
    -u set the ID tag, default is NULL.
    -i set the IP tag, used with -u, default is NULL.
    -d set the DC tag, default is NULL.
    -m set the MARK tag, default is NULL.
    -t set the TEAM tag, default is NULL.
    -n filter net address if host have multiple ip address.
    -l consul server 1, must set avalid ip address.
    -2 consul server 2, must set avalid ip address.
    -k consul access token.
    -s http scheme(http or https), default is http.
    -v print version message.
    -h print help message.
  eg:
    telegraf-prepare -d beijing -m test -t sre -1 server1 -2 server2
    telegraf-prepare -d beijing -m test -t sre -1 server1 -2 server2 -n 10.1.0
  note: telegraf-prepare will change the file /etc/default/telegraf.


=head1 AUTHOR

chenzhe07@gmail.com

=head1 VERSION

telegraf-tags v1.18.6

=cut
DOCUMENTATION
